[{"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/index.js":"1","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/App.js":"2","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/navigation/Header.js":"3","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/Navigation/Footer.js":"4","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/Navigation/Header.js":"5","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/pages/LoginPage.js":"6","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/state/actions/userActions.js":"7","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIShared/FormContainer.js":"8","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIShared/Loader.js":"9","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIShared/Message.js":"10","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/pages/RegisterPage.js":"11","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/pages/HomePage.js":"12","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/state/store.js":"13","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/state/reducers/userReducers.js":"14","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIElements/Post.js":"15","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/constant.js":"16","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/state/reducers/postReducers.js":"17","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/state/actions/postActions.js":"18","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/pages/NewPostPage.js":"19","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/pages/PostDetailPage.js":"20","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIElements/CommentBox.js":"21","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIElements/Comment.js":"22","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIShared/LikeButton.js":"23","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIShared/DislikeButton.js":"24"},{"size":403,"mtime":1611242299184,"results":"25","hashOfConfig":"26"},{"size":1110,"mtime":1611242734918,"results":"27","hashOfConfig":"26"},{"size":2605,"mtime":1611198091774,"results":"28","hashOfConfig":"26"},{"size":367,"mtime":1611239258867,"results":"29","hashOfConfig":"26"},{"size":1952,"mtime":1611239912321,"results":"30","hashOfConfig":"26"},{"size":2225,"mtime":1611199783606,"results":"31","hashOfConfig":"26"},{"size":4084,"mtime":1611208328380,"results":"32","hashOfConfig":"26"},{"size":384,"mtime":1611199946951,"results":"33","hashOfConfig":"26"},{"size":408,"mtime":1611199973853,"results":"34","hashOfConfig":"26"},{"size":274,"mtime":1611200000955,"results":"35","hashOfConfig":"26"},{"size":3206,"mtime":1611239738518,"results":"36","hashOfConfig":"26"},{"size":896,"mtime":1611242349121,"results":"37","hashOfConfig":"26"},{"size":1191,"mtime":1611218802968,"results":"38","hashOfConfig":"26"},{"size":2107,"mtime":1611200861841,"results":"39","hashOfConfig":"26"},{"size":1420,"mtime":1611225555784,"results":"40","hashOfConfig":"26"},{"size":3338,"mtime":1611242301700,"results":"41","hashOfConfig":"26"},{"size":1521,"mtime":1611218728370,"results":"42","hashOfConfig":"26"},{"size":2668,"mtime":1611217793951,"results":"43","hashOfConfig":"26"},{"size":2907,"mtime":1611218924356,"results":"44","hashOfConfig":"26"},{"size":2325,"mtime":1611239050965,"results":"45","hashOfConfig":"26"},{"size":2554,"mtime":1611238894476,"results":"46","hashOfConfig":"26"},{"size":330,"mtime":1611242203884,"results":"47","hashOfConfig":"26"},{"size":909,"mtime":1611225445291,"results":"48","hashOfConfig":"26"},{"size":947,"mtime":1611225450954,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c9dgww",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/index.js",[],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/App.js",[],["106","107"],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/navigation/Header.js",["108","109"],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/Navigation/Footer.js",[],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/Navigation/Header.js",["110","111"],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/pages/LoginPage.js",[],["112","113"],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/state/actions/userActions.js",[],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIShared/FormContainer.js",[],["114","115"],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIShared/Loader.js",[],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIShared/Message.js",[],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/pages/RegisterPage.js",[],["116","117"],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/pages/HomePage.js",[],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/state/store.js",[],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/state/reducers/userReducers.js",[],["118","119"],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIElements/Post.js",["120"],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/constant.js",[],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/state/reducers/postReducers.js",[],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/state/actions/postActions.js",[],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/pages/NewPostPage.js",["121"],"import React from \"react\";\nimport { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Card } from \"react-bootstrap\";\nimport { Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createPost } from \"../state/actions/postActions\";\nimport Message from \"../components/UIShared/Message\";\nimport Loader from \"../components/UIShared/Loader\";\nimport { useHistory } from \"react-router-dom\";\n\n// component to create a new post and publish it to the database\nfunction CreatePost() {\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [isValid, setValidity] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  // creates dispatch object\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  // fetches state from store\n  const postCreator = useSelector((state) => state.userLogin);\n  const { loading, error, success } = postCreator;\n\n  //validates the form and calls create post action\n  const onSubmitButtonPressed = () => {\n    if (title.legnth <= 0 || title === \"\") {\n      setErrorMessage(\"Title must be at least 5 charactes long\");\n      setValidity(false);\n    } else {\n      // gets userinfo from the local storage\n      const userInfo = localStorage.getItem(\"userInfo\");\n      const { _id, name } = JSON.parse(userInfo);\n      const newPost = {\n        user: _id,\n        title: title,\n        content: content,\n        userName: name,\n      };\n      dispatch(createPost(newPost));\n      history.push(\"/\");\n      window.location.reload(false);\n    }\n  };\n  return (\n    <Card className=\"bg-success\">\n      <Card.Body>\n        <h1>Create a New Post</h1>\n        {!isValid && <Message variant=\"danger\">{errorMessage}</Message>}\n        {error && <Message variant=\"danger\">{error}</Message>}\n        {loading && <Loader />}\n        <Form onSubmit={(event) => event.prevenDefaults()}>\n          <Form.Group controlId=\"exampleForm.ControlInput1\">\n            <Form.Label>\n              <b>Title of the Post</b>\n            </Form.Label>\n            <Form.Control\n              value={title}\n              onChange={(event) => setTitle(event.target.value)}\n              type=\"email\"\n              placeholder=\"Title ...\"\n            />\n          </Form.Group>\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n            <Form.Label>\n              <b>Content</b>\n            </Form.Label>\n            <Form.Control\n              value={content}\n              onChange={(event) => setContent(event.target.value)}\n              as=\"textarea\"\n              rows={3}\n              placeholder=\"Type your content here ...\"\n            />\n          </Form.Group>\n          <Button variant=\"primary\" onClick={onSubmitButtonPressed}>\n            Post\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default CreatePost;\n","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/pages/PostDetailPage.js",["122","123","124","125","126","127"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Row, Col, Image, ListGroup, Card, Button } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport Comment from \"../components/UIElements/Comment\";\nimport CommentBox from \"../components/UIElements/CommentBox\";\nimport DislikeButton from \"../components/UIShared/DislikeButton\";\nimport LikeButton from \"../components/UIShared/LikeButton\";\nimport _ from \"lodash\";\n\nexport const PostDetailPage = ({ match }) => {\n  const [post, setpost] = useState({});\n  const [comments, setComments] = useState({});\n  const userInfo = localStorage.getItem(\"userInfo\");\n\n  useEffect(() => {\n    const fetchpost = async () => {\n      const { data } = await axios.get(`/api/posts/${match.params.id}`);\n      setpost(data);\n      setComments(data.comments);\n    };\n    fetchpost();\n  }, [match.params.id]);\n  return (\n    <React.Fragment>\n      <Link to=\"/\" className=\"btn btn-primary my-3\">\n        Go Back\n      </Link>\n      <Card className=\"my-3 py-3 rounded\">\n        <Card.Body>\n          <Card.Title as=\"div\">\n            <h1>\n              <strong>{post.title}</strong>\n            </h1>\n            <span className=\"post-creator\"> Posted by {post.userName}</span>\n          </Card.Title>\n          <Card.Text as=\"div\">\n            <p style={{ whiteSpace: \"pre-wrap\", overflowWrap: \"break-word\" }}>\n              {post.content}\n            </p>\n            <Row className=\"my-3\">\n              <Col className=\"sm-6\">\n                <LikeButton id={match.params.id} likes={_.size(post.likes)} />\n                <DislikeButton\n                  id={match.params.id}\n                  dislikes={_.size(post.dislikes)}\n                />\n                <span className=\"mx-2\">{comments.length} Comments</span>\n              </Col>\n            </Row>\n            <CommentBox />\n          </Card.Text>\n\n          {comments.length > 0 && (\n            <div>\n              {comments.map((comment) => (\n                <Comment\n                  key={comment._id}\n                  comment={comment.content}\n                  userName={comment.userName}\n                />\n              ))}\n            </div>\n          )}\n        </Card.Body>\n      </Card>\n    </React.Fragment>\n  );\n};\n","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIElements/CommentBox.js",["128"],"import React from \"react\";\nimport { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Card } from \"react-bootstrap\";\nimport { Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { createComment } from \"../../state/actions/postActions\";\nimport Loader from \"../UIShared/Loader\";\nimport Message from \"../UIShared/Message\";\n\n// component to create a new post and publish it to the database\nfunction CommentBox() {\n  const [comment, setComment] = useState(\"\");\n  const [isValid, setValidity] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const { id } = useParams();\n\n  // creates dispatch object\n  const dispatch = useDispatch();\n\n  // fetches state from store\n  const postCreator = useSelector((state) => state.userLogin);\n  const { loading, error, success } = postCreator;\n  // gets userinfo from the local storage\n  const userInfo = localStorage.getItem(\"userInfo\");\n  const { _id, name } = JSON.parse(userInfo);\n\n  //validates the form and calls create post action\n  const onSubmitButtonPressed = () => {\n    if (comment.legnth <= 0 || comment === \"\") {\n      setErrorMessage(\"comment must be at least 5 charactes long\");\n      setValidity(false);\n    } else {\n      const newComment = {\n        userName: name,\n        content: comment,\n        user: _id,\n      };\n      dispatch(createComment(newComment, id));\n      // reload the page\n      window.location.reload(false);\n    }\n  };\n  return (\n    <Card>\n      <Card.Body>\n        {!isValid && <Message variant=\"danger\">{errorMessage}</Message>}\n        {error && <Message variant=\"danger\">{error}</Message>}\n        {loading && <Loader />}\n        <Form onSubmit={(event) => event.prevenDefaults()}>\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n            <Form.Label>\n              <p className=\"creator\">\n                <strong>Comment as {name}</strong>\n              </p>\n            </Form.Label>\n            <Form.Control\n              value={comment}\n              onChange={(event) => setComment(event.target.value)}\n              as=\"textarea\"\n              rows={3}\n              placeholder=\"Type your comment here ...\"\n            />\n          </Form.Group>\n          <Button\n            disabled={userInfo === null}\n            variant=\"primary\"\n            onClick={onSubmitButtonPressed}\n          >\n            Post\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default CommentBox;\n","/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIElements/Comment.js",[],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIShared/LikeButton.js",["129","130"],"/Users/amirpahadi/Developer/web/personalProjects/MERNProjects/Reddit-clone/frontend/src/components/UIShared/DislikeButton.js",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":10,"column":9,"nodeType":"137","messageId":"138","endLine":10,"endColumn":17},{"ruleId":"135","severity":1,"message":"139","line":11,"column":9,"nodeType":"137","messageId":"138","endLine":11,"endColumn":16},{"ruleId":"135","severity":1,"message":"140","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":18},{"ruleId":"135","severity":1,"message":"141","line":3,"column":10,"nodeType":"137","messageId":"138","endLine":3,"endColumn":16},{"ruleId":"131","replacedBy":"142"},{"ruleId":"133","replacedBy":"143"},{"ruleId":"131","replacedBy":"144"},{"ruleId":"133","replacedBy":"145"},{"ruleId":"131","replacedBy":"146"},{"ruleId":"133","replacedBy":"147"},{"ruleId":"131","replacedBy":"148"},{"ruleId":"133","replacedBy":"149"},{"ruleId":"135","severity":1,"message":"141","line":3,"column":10,"nodeType":"137","messageId":"138","endLine":3,"endColumn":16},{"ruleId":"135","severity":1,"message":"150","line":25,"column":27,"nodeType":"137","messageId":"138","endLine":25,"endColumn":34},{"ruleId":"135","severity":1,"message":"151","line":3,"column":20,"nodeType":"137","messageId":"138","endLine":3,"endColumn":25},{"ruleId":"135","severity":1,"message":"152","line":3,"column":27,"nodeType":"137","messageId":"138","endLine":3,"endColumn":36},{"ruleId":"135","severity":1,"message":"141","line":3,"column":44,"nodeType":"137","messageId":"138","endLine":3,"endColumn":50},{"ruleId":"135","severity":1,"message":"153","line":4,"column":10,"nodeType":"137","messageId":"138","endLine":4,"endColumn":21},{"ruleId":"135","severity":1,"message":"154","line":5,"column":16,"nodeType":"137","messageId":"138","endLine":5,"endColumn":26},{"ruleId":"135","severity":1,"message":"155","line":15,"column":9,"nodeType":"137","messageId":"138","endLine":15,"endColumn":17},{"ruleId":"135","severity":1,"message":"150","line":24,"column":27,"nodeType":"137","messageId":"138","endLine":24,"endColumn":34},{"ruleId":"135","severity":1,"message":"140","line":2,"column":17,"nodeType":"137","messageId":"138","endLine":2,"endColumn":25},{"ruleId":"135","severity":1,"message":"156","line":15,"column":15,"nodeType":"137","messageId":"138","endLine":15,"endColumn":19},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'useState' is defined but never used.","'Button' is defined but never used.",["157"],["158"],["157"],["158"],["157"],["158"],["157"],["158"],"'success' is assigned a value but never used.","'Image' is defined but never used.","'ListGroup' is defined but never used.","'useSelector' is defined but never used.","'useHistory' is defined but never used.","'userInfo' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]